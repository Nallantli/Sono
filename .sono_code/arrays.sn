let pop = (&array) => {
	let nl = {};
	i in {0 until (len array - 1)} do {
		nl = nl + { array[i] };
	};
	array = nl;
	return array;
};

let shift = (&array) => {
	let nl = {};
	i in {1 until len array} do {
		nl = nl + { array[i] };
	};
	array = nl;
	return array;
};

let front = (&array) => {
	return array[0];
};

let back = (&array) => {
	return array[len array - 1];
};

let contains = (&array, value) => {
	i in array do {
		i == value then {
			return true;
		};
	};
	return false;
};

let push = (&array, value) => {
	array = array + { value };
	return array;
}

let sort = (&array, comp) => {
	comp == null then {
		comp = (a, b) => {
			return a < b;
		};
	};
	let merge_sort = (array) => {
		len array <= 1 then {
			return array;
		};
		let a = {};
		let b = {};
		i in {1 until len array} do {
			comp(array[i], array[0]) then {
				a = a + { array[i] };
			} else {
				b = b + { array[i] };
			};
		};
		return merge_sort(a) + { array[0] } + merge_sort(b);
	};
	array = merge_sort(array);
	return array;
};