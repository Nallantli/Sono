# Benjamin Park
# 2-07-2020

static RuleSets class {
	var vowelNasalization = S |> [+|syl] -> [+|nasal] // null ~ [-|syl, +|nasal];
	var finalDevoicing = S |> [-|syl, +|cons, +|voice, -|nasal] -> [-|voice] // null ~ "#";
	var schwaEpenthesis = S |> null -> 'É™' // [-|syl, +|cons, +|str] ~ [-|syl, +|cons, +|str];
	var highVowelPalatalization = S |> [-|syl] -> [+|DOR, +|high, -|low, +|front, -|back] // null ~ [+|syl, +|high, +|front];
	var yodPalatalization = Af |> [-|syl] -> [+|DOR, +|high, -|low, +|front, -|back] // "$" ~ 'j';
	var wLabialization = Af |> [-|syl] -> [+|LAB, +|round] // "$" ~ 'w';
	var medialVoicing = S |> [-|syl, -|voice, +|cons] -> [+|voice] // [+|syl, +|voice] ~ [+|syl, +|voice];
	var medialFrication = S |> [-|syl, +|cons, -|son] -> [+|del, +|cont, +|str] // [+|syl, +|voice] ~ [+|syl, +|voice];
	var hDropping = S |> 'h' -> null // "$" ~ [+|syl];
	var nasalAssimilation = S |> 'n' -> [2|LAB, 2|round, 2|ld, 2|COR, 2|ant, 2|dist, 2|DOR, 2|high, 2|low, 2|front, 2|back] // null ~ [-|syl, +|cons, 2|LAB, 2|round, 2|ld, 2|COR, 2|ant, 2|dist, 2|DOR, 2|high, 2|low, 2|front, 2|back];
	var deRhoticizationCons = Af |> [+|syl] -> [+|long] // null ~ {[-|syl, +|son, -|nasal, -|LAB, -|LAT, -|DOR], "$", [-|syl]};
	var deRhoticizationFinal = Af |> [+|syl] -> [+|long] // null ~ {[-|syl, +|son, -|nasal, -|LAB, -|LAT, -|DOR], "#"};
	var stopDeletion = S |> [-|son, -|del] -> null // null ~ {"$", [-|son, -|del]};

	var Common = {
		vowelNasalization,
		finalDevoicing,
		schwaEpenthesis,
		highVowelPalatalization,
		yodPalatalization,
		wLabialization,
		medialVoicing,
		medialFrication,
		hDropping,
		nasalAssimilation,
		deRhoticizationCons,
		deRhoticizationFinal,
		stopDeletion
	};
}

Vector::apply(ref this, ref ruleset) => {
	var applied = {};
	e in this do {
		type ruleset == "Vector" then {
			var temp = e;
			r in ruleset do {
				temp >>= r;
			}
			applied += { temp };
		} else {
			applied += {e >> ruleset};
		}
	}
	return applied;
}

Word::apply(ref this, ref ruleset) => {
	var applied = this;
	type ruleset == "Vector" then {
		r in ruleset do {
			applied >>= r;
		}
	} else {
		applied >>= ruleset;
	}
	return applied;
}

Word::apply(ref this, ref ruleset) => {
	var applied = this;
	type ruleset == "Vector" then {
		r in ruleset do {
			applied >>= r;
		}
	} else {
		applied >>= ruleset;
	}
	return applied;
}