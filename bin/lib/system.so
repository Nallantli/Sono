# Benjamin Park
# 02-08-2020

import "LIB_Console";

var type = (ref x) => {
	return type(x);
}

var com = (ref x) => {
	return com(x);
}

var alloc = (ref x) => {
	return alloc(x);
}

var length = (ref x) => {
	return length(x);
}

print(ref message) => {
	_OUTER_CALL_ ("LIB_Console", "PRINT", str message);
}

println(ref message) => {
	print(str message + "\n");
}

exit() => {
	_OUTER_CALL_ ("LIB_Console", "EXIT");
}

timeMS() => {
	return _OUTER_CALL_ ("LIB_Console", "TIME");
}

String::match(ref this, ref pattern) => {
	return _OUTER_CALL_ ("LIB_Console", "REGEX", pattern, this);
}

Number::log(ref this) => {
	return _OUTER_CALL_ ("LIB_Console", "LOG", this);
}

Number::abs(ref this) => {
	this < 0 then {
		return -this ;
	} else {
		return this;
	}
}

Number::floor(ref this) => {
	return _OUTER_CALL_ ("LIB_Console", "FLOOR", this);
}

Number::ceil(ref this) => {
	return _OUTER_CALL_ ("LIB_Console", "CEIL", this);
}

Number::round(ref this, ref place) => {
	place == null then {
		return _OUTER_CALL_ ("LIB_Console", "ROUND", this);
	}
	return (_OUTER_CALL_ ("LIB_Console", "ROUND", this * (10 ** place))) / (10 ** place);
}

getNum(ref x) => {
	return num x;
}

getString(ref x) => {
	return str x;
}

getVector(ref x) => {
	return vec x;
}

getWord(ref x) => {
	return word x;
}

getPhone(ref x) => {
	return (vec word x)[0];
}

getChar(ref x) => {
	return char x;
}

getCode(ref x) => {
	return code x;
}

getMat(ref x) => {
	return mat x;
}

getHash(ref x) => {
	return hash x;
}

static Random class {
	float() => {
		return _OUTER_CALL_ ("LIB_Console", "RAND");
	}

	int(ref lower, ref upper) => {
		return (float() * (upper - lower) + lower).floor();
	}

	set(ref vector) => {
		refer vector[int(0, vector.length())]
	}
}

static Input class {
	line() => {
		return _OUTER_CALL_ ("LIB_Console", "GET_LINE");
	}
	number() => {
		return _OUTER_CALL_ ("LIB_Console", "GET_NUMBER");
	}
}