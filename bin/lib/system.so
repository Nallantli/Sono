# Benjamin Park
# 07-07-2020

import "LIB_Console";
load "math";

print(final message) => {
	"LIB_Console.PRINT" _OUTER_CALL_ (str message);
}

println(final message) => {
	print(str message + "\n");
}

exit() => {
	"LIB_Console.EXIT" _OUTER_CALL_ null;
}

timeMS() => {
	return ("LIB_Console.TIME" _OUTER_CALL_ null);
}

String::match(ref this, ref pattern) => {
	return "LIB_Console.REGEX" _OUTER_CALL_ (pattern, this);
}

Number::log(ref this) => {
	return "LIB_Console.LOG" _OUTER_CALL_ n;
}

getNum(ref x) => {
	return num x;
}

getStr(ref x) => {
	return str x;
}

getVec(ref x) => {
	return vec x;
}

getLen(ref x) => {
	return len x;
}

getWord(ref x) => {
	return word x;
}

getPhone(ref x) => {
	return (vec word x)[0];
}

getChar(ref x) => {
	return char x;
}

getCode(ref x) => {
	return code x;
}

getMat(ref x) => {
	return mat x;
}

getCom(ref x) => {
	return com x;
}

static Random class {
	float() => {
		return ("LIB_Console.RAND" _OUTER_CALL_ null);
	}

	int(ref lower, ref upper) => {
		return (float() * (upper - lower) + lower).floor();
	}

	set(ref vector) => {
		return vector[int(0, len vector)]
	}
}

static Input class {
	line() => {
		return ("LIB_Console.GET.LINE" _OUTER_CALL_ null);
	}
	number() => {
		return ("LIB_Console.GET.NUMBER" _OUTER_CALL_ null);
	}
}