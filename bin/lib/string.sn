load "system";
load "vector";

String::pop(&this) => {
	this = (vec this).pop().join();
	return this;
};

String::shift(&this) => {
	this = (vec this).shift().join();
	return this;
};

String::front(&this) => {
	return (vec this).front();
};

String::back(&this) => {
	return (vec this).back();
};

String::isEmpty(&this) => {
	return (len this == 0);
};

String::at(&this, index) => {
	return (vec this)[index];
};

String::push(&this, value) => {
	this += str value;
	return this;
}

String::contains(&this, pattern) => {
	return (len this.match(pattern) > 0);
};

String::split(&this, pattern) => {
	var stringArray = vec this;
	var coords = this.match(pattern);
	var array = {};
	var mode = true;
	var c = 0;
	var curr = {};
	i in {0 until len this} do {
		c < len coords then {
			coords[c][1] == i then {
				mode = true;
				c = c + 1;
			};
			c < len coords then {
				coords[c][0] == i then {
					array = array + { curr.join() };
					curr = {};
					mode = false;
				};
			};
		};
		mode then {
			curr = curr + { stringArray[i] };
		};
	};
	curr != {} then {
		array = array + { curr.join() };
	};
	return array;
};

String::replace(&this, pattern, value) => {
	var stringArray = vec this;
	var coords = this.match(pattern);
	var array = {};
	var mode = true;
	var c = 0;
	var curr = {};
	i in {0 until len this} do {
		c < len coords then {
			coords[c][1] == i then {
				mode = true;
				c = c + 1;
			};
			c < len coords then {
				coords[c][0] == i then {
					array = array + { curr.join(), value };
					curr = {};
					mode = false;
				};
			};
		};
		mode then {
			curr = curr + { stringArray[i] };
		};
	};
	curr != {} then {
		array = array + { curr.join() };
	};
	this = array.join();
	return this;
};