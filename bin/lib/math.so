Number::abs(final n) => {
	n < 0 then {
		return n * -1;
	} else {
		return +n;
	};
};

Number::floor(final n) => {
	var d = ((n * 10) % 10) / 10;
	return n - d;
};

Number::ceil(final n) => {
	var d = ((n * 10) % 10) / 10;
	n > 0 then {
		d > 0 then {
			return n - d + 1;
		} else {
			return n;
		};
	} else {
		d < 0 then {
			return n - d - 1;
		} else {
			return n;
		};
	};
};

Number::round(final n) => {
	var f = n.floor();
	var c = n.ceil();
	var df = (n - f).abs();
	var dc = (n - c).abs();
	df < dc then {
		return f;
	} else {
		return c;
	};
};

static Math class {
	min(final vector) => {
		var n = vector[0];
		i in {1 until len vector} do {
			vector[i] < n then {
				n = vector[i];
			};
		};
		return n;
	};

	minIndex(final vector) => {
		var n = vector[0];
		var index = 0;
		i in {1 until len vector} do {
			vector[i] < n then {
				n = vector[i];
				index = i;
			};
		};
		return index;
	};

	add(final a, final b) => {
		return a + b;
	};

	sub(final a, final b) => {
		return a - b;
	};

	mul(final a, final b) => {
		return a * b;
	};

	div(final a, final b) => {
		return a / b;
	};

	mod(final a, final b) => {
		return a % b;
	};
};