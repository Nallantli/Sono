# Benjamin Park
# 10-07-2020

Number::format(ref this, final d) => {
	var s = vec str this;
	var ns = "";
	var i = 0;
	var mode = true;
	c in s do {
		mode then {
			ns += c;
			c == "." then {
				mode = false;
			}
		} else {
			i < d then {
				ns += c;
			} else {
				break;
			}
			i += 1;
		}
	}
	i == 0 then {
		ns += ".";
	}
	i < d do {
		ns += "0";
		i += 1;
	}
	return ns;
}

static Math class {
	min(ref vector) => {
		var n = vector[0];
		i in {1 until length(vector)} do {
			vector[i] < n then {
				n = vector[i];
			}
		}
		refer n;
	}

	minIndex(ref vector) => {
		var n = vector[0];
		var index = 0;
		i in {1 until length(vector)} do {
			vector[i] < n then {
				n = vector[i];
				index = i;
			}
		}
		return index;
	}

	max(ref vector) => {
		var n = vector[0];
		i in {1 until length(vector)} do {
			vector[i] > n then {
				n = vector[i];
			}
		}
		refer n;
	}

	maxIndex(ref vector) => {
		var n = vector[0];
		var index = 0;
		i in {1 until length(vector)} do {
			vector[i] > n then {
				n = vector[i];
				index = i;
			}
		}
		return index;
	}

	add(ref a, ref b) => {
		return a + b;
	}

	sub(ref a, ref b) => {
		return a - b;
	}

	mul(ref a, ref b) => {
		return a * b;
	}

	div(ref a, ref b) => {
		return a / b;
	}

	mod(ref a, ref b) => {
		return a % b;
	}

	pow(ref a, ref b) => {
		return a ** b;
	}
}