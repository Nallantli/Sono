# Benjamin Park
# 30-07-2020

struct Map class {
	struct Node class {
		var key;
		var value;
		var prev;
		var next;

		init(ref key, ref value, ref prev) => {
			this.key = key;
			this.value = value;
			this.prev = prev;
		}
	}

	struct Element class {
		var key;
		var value;

		init(ref key, ref value) => {
			this.key = key;
			this.value = value;
		}

		getString() => {
			return str key + "=" + str value;
		}

		getHash() => {
			return hash (str hash key + str hash value);
		}

		equals(ref o) => {
			type(o) != type(this) then {
				return false;
			}
			return o.key == key && o.value == value;
		}
	}

	var buckets;
	var size;
	var rawSize;

	init(ref initVector) => {
		this.size = 0;
		this.rawSize = 16;
		this.buckets = alloc(this.rawSize);
		initVector != null then {
			e in initVector do {
				getIndex(e[0]) = e[1];
			}
		}
	}

	isEmpty() => {
		return (size == 0);
	}

	getIndex(ref key) => {
		size >= rawSize then {
			expand();
		}
		var h = abs(hash key) % rawSize;
		var curr = buckets[h];
		curr == null then {
			buckets[h] = new Node(key, null, null);
			size += 1;
			refer buckets[h].value;
		}
		true do {
			curr.key == key then {
				refer curr.value;
			}
			curr.next == null then {
				break;
			}
			curr = curr.next;
		}
		var p = new Node(key, null, curr);
		curr.next = p;
		size += 1;
		refer p.value;
	}

	remove(ref key) => {
		var h = abs(hash key) % rawSize;
		var curr = buckets[h];
		true do {
			curr.key == key then {
				break;
			}
			curr.next == null then {
				return false;
			}
			curr = curr.next;
		}
		curr.prev == null then {
			buckets[h] = curr.next;
		} else {
			curr.prev.next = curr.next;
		}
		size -= 1;
		return true;
	}

	containsKey(ref key) => {
		var h = abs(hash key) % rawSize;
		var curr = buckets[h];
		curr != null do {
			curr.key == key then {
				return true;
			}
			curr = curr.next;
		}
		return false;
	}

	expand() => {
		size = 0;
		var vector = {};
		b in buckets do {
			var curr = b;
			curr != null do {
				vector += {{curr.key, curr.value}};
				curr = curr.next;
			}
		}
		rawSize *= 2;
		buckets = alloc(rawSize);
		e in vector do {
			getIndex(e[0]) = e[1];
		}
	}

	getVector() => {
		var list = {};
		b in buckets do {
			var curr = b;
			curr != null do {
				list += {new Element(curr.key, curr.value)};
				curr = curr.next;
			}
		}
		return list;
	}

	getLength() => {
		return size;
	}

	getString() => {
		return str getVector();
	}
}