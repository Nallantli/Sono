import "Sock";

struct Socket class {
	var socket;

	init(address, port) => {
		port == null then {
			this.socket = address;
		} else {
			this.socket = ("Sock.OPEN" _OUTER_CALL_ {address, port});
		};
	};

	close() => {
		"Sock.CLOSE" _OUTER_CALL_ (this.socket);
		this.socket = null;
	};

	getOutput() => {
		return new Output(this.socket);
	};

	getInput() => {
		return new Input(this.socket);
	};

	struct Output class {
		var out;

		init(socket) => {
			this.out = ("Sock.OUT.OPEN" _OUTER_CALL_ socket);
		};

		send(string) => {
			"Sock.OUT.SEND" _OUTER_CALL_ {this.out, string};
		};

		close() => {
			"Sock.OUT.CLOSE" _OUTER_CALL_ (this.out);
			this.out = null;
		};
	};

	struct Input class {
		var input;

		init(socket) => {
			this.input = ("Sock.IN.OPEN" _OUTER_CALL_ socket);
		};

		read() => {
			return ("Sock.IN.READ" _OUTER_CALL_ (this.input));
		};

		close() => {
			"Sock.IN.CLOSE" _OUTER_CALL_ (this.input);
			this.input = null;
		};
	};
};

struct Server class {
	var server;

	init(port) => {
		this.server = ("Sock.SERVER.OPEN" _OUTER_CALL_ port);
	};

	close() => {
		"Sock.SERVER.CLOSE" _OUTER_CALL_ (this.server);
		this.server = null;
	};

	accept() => {
		return new Socket("Sock.SERVER.ACCEPT" _OUTER_CALL_ (this.server));
	};
};