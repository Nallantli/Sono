# Benjamin Park
# 30-07-2020

load "vector.so";

String::pop(ref this) => {
	this = (vec this).pop().join();
	refer this;
}

String::shift(ref this) => {
	this = (vec this).shift().join();
	refer this;
}

String::front(ref this) => {
	return (vec this).front();
}

String::back(ref this) => {
	return (vec this).back();
}

String::isEmpty(ref this) => {
	return (length(this) == 0);
}

String::at(ref this, final index) => {
	return (vec this)[index];
}

String::push(ref this, ref value) => {
	this += str value;
	refer this;
}

String::contains(ref this, final pattern) => {
	return (length(this.match(pattern)) > 0);
}

String::distArray(ref this, ref string, final costDel, final costIns, final costRep) => {
	return (vec this).distArray(vec string, costDel, costIns, costRep);
}

String::dist(ref this, ref string, final costDel, final costIns, final costRep) => {
	return (vec this).dist(vec string, costDel, costIns, costRep);
}

String::steps(ref this, ref string, final costDel, final costIns, final costRep) => {
	return (vec this).steps(vec string, costDel, costIns, costRep);
}

String::nGram(ref this, final n, delim) => {
	delim == null then {
		delim = "\\s";
	}
	var s = this.split(delim);
	return s.nGram(n);
}

String::split(ref this, final pattern) => {
	var stringArray = vec this;
	var coords = this.match(pattern);
	var array = {};
	var mode = true;
	var c = 0;
	var curr = {};
	i in {0 until length(this)} do {
		c < length(coords) then {
			coords[c][1] == i then {
				mode = true;
				c = c + 1;
			}
			c < length(coords) then {
				coords[c][0] == i then {
					array = array + { curr.join() };
					curr = {};
					mode = false;
				}
			}
		}
		mode then {
			curr = curr + { stringArray[i] };
		}
	}
	curr != {} then {
		array = array + { curr.join() };
	}
	return array;
}

String::replace(ref this, final pattern, final value) => {
	var stringArray = vec this;
	var coords = this.match(pattern);
	var array = {};
	var mode = true;
	var c = 0;
	var curr = {};
	i in {0 until length(this)} do {
		c < length(coords) then {
			coords[c][1] == i then {
				mode = true;
				c = c + 1;
			}
			c < length(coords) then {
				coords[c][0] == i then {
					array = array + { curr.join(), value };
					curr = {};
					mode = false;
				}
			}
		}
		mode then {
			curr = curr + { stringArray[i] };
		}
	}
	curr != {} then {
		array = array + { curr.join() };
	}
	this = array.join();
	refer this;
}