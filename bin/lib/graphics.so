# Benjamin Park
# 02-08-2020

import "LIB_Graphics";

struct Window class {
	var width;
	var height;
	var window;
	var component;
	var graphics;

	init(final title, final width, final height, ref closefunction) => {
		this.width = width;
		this.height = height;
		var data = (_OUTER_CALL_ ("LIB_Graphics", "INIT", title, width, height, closefunction));
		this.window = data[0];
		this.component = data[1];
	}

	show() => {
		_OUTER_CALL_ ("LIB_Graphics", "SHOW", window);
	}

	hide() => {
		_OUTER_CALL_ ("LIB_Graphics", "HIDE", window);
	}

	resize(final width, final height) => {
		_OUTER_CALL_ ("LIB_Graphics", "SETSIZE", window, width, height);
		this.width = width;
		this.height = height;
	}

	add(ref child, ref position) => {
		_OUTER_CALL_ ("LIB_Graphics", "COMPONENT_ADD", component, child.component, position);
		return child;
	}

	close() => {
		_OUTER_CALL_ ("LIB_Graphics", "CLOSE", window);
		window = null;
	}

	getGraphics() => {
		this.graphics == null then {
			this.graphics = new Component.Graphics();
			add(this.graphics, "Center");
		}
		refer this.graphics;
	}

	repaint() => {
		_OUTER_CALL_ ("LIB_Graphics", "REPAINT", window);
	}

	onMouseMove(ref function) => {
		var mousef = (a, b, c, d, e, f, g) => {
			refer function(new MouseEvent(a, b, c, d, e, f, g));
		}
		_OUTER_CALL_ ("LIB_Graphics", "ADDMOUSELISTENER", window, 0, mousef);
	}

	onMouseDrag(ref function) => {
		var mousef = (a, b, c, d, e, f, g) => {
			refer function(new MouseEvent(a, b, c, d, e, f, g));
		}
		_OUTER_CALL_ ("LIB_Graphics", "ADDMOUSELISTENER", window, 1, mousef);
	}

	onMouseRelease(ref function) => {
		var mousef = (a, b, c, d, e, f, g) => {
			refer function(new MouseEvent(a, b, c, d, e, f, g));
		}
		_OUTER_CALL_ ("LIB_Graphics", "ADDMOUSELISTENER", window, 2, mousef);
	}

	onMousePress(ref function) => {
		var mousef = (a, b, c, d, e, f, g) => {
			refer function(new MouseEvent(a, b, c, d, e, f, g));
		}
		_OUTER_CALL_ ("LIB_Graphics", "ADDMOUSELISTENER", window, 3, mousef);
	}

	onMouseExit(ref function) => {
		var mousef = (a, b, c, d, e, f, g) => {
			refer function(new MouseEvent(a, b, c, d, e, f, g));
		}
		_OUTER_CALL_ ("LIB_Graphics", "ADDMOUSELISTENER", window, 4, mousef);
	}

	onMouseEnter(ref function) => {
		var mousef = (a, b, c, d, e, f, g) => {
			refer function(new MouseEvent(a, b, c, d, e, f, g));
		}
		_OUTER_CALL_ ("LIB_Graphics", "ADDMOUSELISTENER", window, 5, mousef);
	}

	onMouseClick(ref function) => {
		var mousef = (a, b, c, d, e, f, g) => {
			refer function(new MouseEvent(a, b, c, d, e, f, g));
		}
		_OUTER_CALL_ ("LIB_Graphics", "ADDMOUSELISTENER", window, 6, mousef);
	}

	onKeyPress(ref function) => {
		var keyf = (a, b, c) => {
			refer function(new KeyEvent(a, b, c));
		}
		_OUTER_CALL_ ("LIB_Graphics", "ADDKEYLISTENER", window, 0, keyf);
	}

	onKeyRelease(ref function) => {
		var keyf = (a, b, c) => {
			refer function(new KeyEvent(a, b, c));
		}
		_OUTER_CALL_ ("LIB_Graphics", "ADDKEYLISTENER", window, 1, keyf);
	}

	onKeyType(ref function) => {
		var keyf = (a, b, c) => {
			refer function(new KeyEvent(a, b, c));
		}
		_OUTER_CALL_ ("LIB_Graphics", "ADDKEYLISTENER", window, 2, keyf);
	}

	getHash() => {
		return hash window;
	}

	equals(ref o) => {
		type(this) != type(o) then {
			return false;
		}
		return window == o.window;
	}

	struct MouseEvent class {
		var button;
		var clickCount;
		var modifiers;
		var x;
		var y;
		var screenX;
		var screenY;

		init(final button, final clickCount, final modifiers, final x, final y, final screenX, final screenY) => {
			this.button = button;
			this.clickCount = clickCount;
			this.modifiers = modifiers;
			this.x = x;
			this.y = y;
			this.screenX = screenX;
			this.screenY = screenY;
		}

		getString() => {
			return "(BUTTON=" + str button + ", COUNT=" + str clickCount + ", MODIFIERS=" + str modifiers + ", X=" + str x + ", Y=" + str y + ", SCREEN_X=" + str screenX + ", SCREEN_Y=" + str screenY + ")";
		}
	}

	struct KeyEvent class {
		var charCode;
		var charStr;
		var actionKey;

		init(final charCode, final charStr, final actionKey) => {
			this.charCode = charCode;
			this.charStr = charStr;
			this.actionKey = actionKey;
		}

		getString() => {
			return "(CODE=" + str charCode + ", STR=" + charStr + ", ISACTION=" + str actionKey + ")";
		}
	}
}

static Component class {
	var NORTH = "North";
	var SOUTH = "South";
	var EAST = "East";
	var WEST = "West";
	var MIDDLE = "Center";

	var CENTER = 0;
	var TOP = 1;
	var LEFT = 2;
	var BOTTOM = 3;
	var RIGHT = 4;
	var LEADING = 10;

	abstract Prototype class {
		var component;

		add(ref child) => {
			_OUTER_CALL_ ("LIB_Graphics", "COMPONENT_ADD", component, child.component);
			refer child;
		}

		getHash() => {
			return hash component;
		}

		equals(ref o) => {
			type(this) != type(o) then {
				return false;
			}
			return component == o.component;
		}
	}

	abstract Actionable extends Prototype class {
		var enabled;

		enable() => {
			this.enabled = true;
			_OUTER_CALL_ ("LIB_Graphics", "COMPONENT_SETENABLE", component, true);
		}

		disable() => {
			this.enabled = false;
			_OUTER_CALL_ ("LIB_Graphics", "COMPONENT_SETENABLE", component, false);
		}

		action(ref function) => {
			_OUTER_CALL_ ("LIB_Graphics", "COMPONENT_ACTION", component, function);
		}

		click() => {
			_OUTER_CALL_ ("LIB_Graphics", "COMPONENT_CLICK", component);
		}
	}

	struct Graphics extends Prototype class {
		init() => {
			this.component = (_OUTER_CALL_ ("LIB_Graphics", "GRAPHICS_INIT"));
		}

		add(ref shape) => {
			var success = (_OUTER_CALL_ ("LIB_Graphics", "GRAPHICS_ADD", component, shape.data));
			success == false then {
				throw "Shape already exists in Graphics";
			}
			refer shape;
		}

		remove(ref shape) => {
			_OUTER_CALL_ ("LIB_Graphics", "GRAPHICS_REMOVE", component, shape.data);
			success == false then {
				throw "Shape does not exist in Graphics";
			}
		}
	}

	struct Text extends Prototype class {
		var label;
		var alignmentX;
		var alignmentY;

		init(final label) => {
			this.label = label;
			this.component = (_OUTER_CALL_ ("LIB_Graphics", "COMPONENT_TEXT_INIT", label));
		}

		align(final alignmentX, final alignmentY) => {
			this.alignmentX = alignmentX;
			this.alignmentY	= alignmentY;
			_OUTER_CALL_ ("LIB_Graphics", "COMPONENT_TEXT_ALIGN", component, alignmentX, alignmentY);
		}

		setText(final label) => {
			this.label = label;
			_OUTER_CALL_ ("LIB_Graphics", "COMPONENT_TEXT_SETTEXT", component, label);
		}
	}

	struct Button extends Actionable class {
		var label;

		init(final label) => {
			this.label = label;
			this.component = (_OUTER_CALL_ ("LIB_Graphics", "COMPONENT_BUTTON_INIT", label));
		}

		setText(final label) => {
			this.label = label;
			_OUTER_CALL_ ("LIB_Graphics", "COMPONENT_BUTTON_SETTEXT", component, label);
		}
	}

	struct CheckBox extends Actionable class {
		var label;

		init(final label) => {
			this.label = label;
			this.component = (_OUTER_CALL_ ("LIB_Graphics", "COMPONENT_CHECKBOX_INIT", label));
		}

		setText(final label) => {
			this.label = label;
			_OUTER_CALL_ ("LIB_Graphics", "COMPONENT_CHECKBOX_SETTEXT", component, label);
		}
	}

	static Panel class {
		struct Border extends Prototype class {
			init() => {
				this.component = (_OUTER_CALL_ ("LIB_Graphics", "COMPONENT_PANEL_BORDER_INIT"));
			}
		}

		struct Block extends Prototype class {
			init() => {
				this.component = (_OUTER_CALL_ ("LIB_Graphics", "COMPONENT_PANEL_BLOCK_INIT"));
			}
		}

		struct Inline extends Prototype class {
			init() => {
				this.component = (_OUTER_CALL_ ("LIB_Graphics", "COMPONENT_PANEL_INLINE_INIT"));
			}
		}

		struct Table extends Prototype class {
			var rows;
			var cols;

			init(final rows, final cols) => {
				this.rows = rows;
				this.cols = cols;
				this.component = (_OUTER_CALL_ ("LIB_Graphics", "COMPONENT_PANEL_TABLE_INIT", rows, cols));
			}
		}

		struct Split extends Prototype class {
			var orientation;

			init(final orientation) => {
				this.orientation = orientation;
				this.component = (_OUTER_CALL_ ("LIB_Graphics", "COMPONENT_PANEL_SPLIT_INIT", orientation));
			}
		}
	}

	struct TabPane extends Prototype class {
		init() => {
			this.component = (_OUTER_CALL_ ("LIB_Graphics", "COMPONENT_TABPANE_INIT"));
		}

		add(final label, ref child) => {
			_OUTER_CALL_ ("LIB_Graphics", "COMPONENT_TABPANE_ADD", component, child.component, label);
			refer child;
		}
	}

	static Menu class {
		struct Bar extends Prototype class {
			init() => {
				this.component = (_OUTER_CALL_ ("LIB_Graphics", "COMPONENT_MENU_BAR_INIT"));
			}
		}

		struct Item extends Prototype class {
			var label;

			init(final label) => {
				this.label = label;
				this.component = (_OUTER_CALL_ ("LIB_Graphics", "COMPONENT_MENU_ITEM_INIT", label));
			}
		}

		struct Label extends Actionable class {
			var label;

			init(final label) => {
				this.label = label;
				this.component = (_OUTER_CALL_ ("LIB_Graphics", "COMPONENT_MENU_LABEL_INIT", label));
			}
		}
	}
}

static Shape class {
	var LEFT = 0;
	var CENTER = 1;
	var RIGHT = 2;

	struct Rectangle class {
		var data;

		var fill;
		var outline;
		var x;
		var y;
		var width;
		var height;

		init(ref fill, ref outline, final x, final y, final width, final height) => {
			this.fill = fill;
			this.outline = outline;
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			fill == null then {
				this.data = (_OUTER_CALL_ ("LIB_Graphics", "SHAPE_RECTANGLE_INIT", null, outline.data, x, y, width, height));
			} else outline == null then {
				this.data = (_OUTER_CALL_ ("LIB_Graphics", "SHAPE_RECTANGLE_INIT", fill.data, null, x, y, width, height));
			} else {
				this.data = (_OUTER_CALL_ ("LIB_Graphics", "SHAPE_RECTANGLE_INIT", fill.data, outline.data, x, y, width, height));
			}
		}

		setFill(ref fill) => {
			fill != this.fill then {
				this.fill = fill;
				_OUTER_CALL_ ("LIB_Graphics", "SHAPE_SETFILL", data, fill.data);
			}
		}

		setOutline(ref outline) => {
			outline != this.outline then {
				this.outline = outline;
				_OUTER_CALL_ ("LIB_Graphics", "SHAPE_SETOUTLINE", data, outline.data);
			}
		}

		setSize(final width, final height) => {
			this.width = width;
			this.height = height;
			_OUTER_CALL_ ("LIB_Graphics", "SHAPE_RECTANGLE_SIZE", data, width, height);
		}

		setOrigin(final x, final y) => {
			this.x = x;
			this.y = y;
			_OUTER_CALL_ ("LIB_Graphics", "SHAPE_RECTANGLE_MOVE", data, x, y);
		}

		move(final x, final y) => {
			this.x += x;
			this.y += y;
			_OUTER_CALL_ ("LIB_Graphics", "SHAPE_RECTANGLE_MOVE", data, this.x, this.y);
		}
	}

	struct Oval class {
		var data;

		var fill;
		var outline;
		var x;
		var y;
		var width;
		var height;

		init(ref fill, ref outline, final x, final y, final width, final height) => {
			this.fill = fill;
			this.outline = outline;
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			fill == null then {
				this.data = (_OUTER_CALL_ ("LIB_Graphics", "SHAPE_OVAL_INIT", null, outline.data, x, y, width, height));
			} else outline == null then {
				this.data = (_OUTER_CALL_ ("LIB_Graphics", "SHAPE_OVAL_INIT", fill.data, null, x, y, width, height));
			} else {
				this.data = (_OUTER_CALL_ ("LIB_Graphics", "SHAPE_OVAL_INIT", fill.data, outline.data, x, y, width, height));
			}
		}

		setFill(ref fill) => {
			fill != this.fill then {
				this.fill = fill;
				_OUTER_CALL_ ("LIB_Graphics", "SHAPE_SETFILL", data, fill.data);
			}
		}

		setOutline(ref outline) => {
			outline != this.outline then {
				this.outline = outline;
				_OUTER_CALL_ ("LIB_Graphics", "SHAPE_SETOUTLINE", data, outline.data);
			}
		}

		setSize(final width, final height) => {
			this.width = width;
			this.height = height;
			_OUTER_CALL_ ("LIB_Graphics", "SHAPE_OVAL_SIZE", data, width, height);
		}

		setOrigin(final x, final y) => {
			this.x = x;
			this.y = y;
			_OUTER_CALL_ ("LIB_Graphics", "SHAPE_OVAL_MOVE", data, x, y);
		}

		move(final x, final y) => {
			this.x += x;
			this.y += y;
			_OUTER_CALL_ ("LIB_Graphics", "SHAPE_OVAL_MOVE", data, this.x, this.y);
		}
	}

	struct Line class {
		var data;

		var fill;
		var x1;
		var y1;
		var x2;
		var y2;

		init(ref fill, final x1, final y1, final x2, final y2) => {
			this.fill = fill;
			this.x1 = x1;
			this.y1 = y1;
			this.x2 = x2;
			this.y2 = y2;
			this.data = (_OUTER_CALL_ ("LIB_Graphics", "SHAPE_LINE_INIT", fill.data, x1, y1, x2, y2));
		}

		setFill(ref fill) => {
			fill != this.fill then {
				this.fill = fill;
				_OUTER_CALL_ ("LIB_Graphics", "SHAPE_SETFILL", data, fill.data);
			}
		}

		setPoints(final x1, final y1, final x2, final y2) => {
			this.x1 = x1;
			this.y1 = y1;
			this.x2 = x2;
			this.y2 = y2;
			_OUTER_CALL_ ("LIB_Graphics", "SHAPE_LINE_MOVE", data, x1, y1, x2, y2);
		}

		move(final x, final y) => {
			this.x1 += x;
			this.x2 += x;
			this.y1 += y;
			this.y2 += y;
			_OUTER_CALL_ ("LIB_Graphics", "SHAPE_LINE_MOVE", data, this.x1, this.y1, this.x2, this.y2);
		}
	}

	struct Text class {
		var data;

		var fill;
		var x;
		var y;
		var string;
		var font;
		var align;

		init(ref fill, final x, final y, final string, final align) => {
			this.fill = fill;
			this.x = x;
			this.y = y;
			this.string = string;
			this.align = align;
			this.data = (_OUTER_CALL_ ("LIB_Graphics", "SHAPE_TEXT_INIT", fill.data, x, y, string, align));
		}

		setFill(ref fill) => {
			fill != this.fill then {
				this.fill = fill;
				_OUTER_CALL_ ("LIB_Graphics", "SHAPE_SETFILL", data, fill.data);
			}
		}

		setFont(ref font) => {
			this.font = font;
			_OUTER_CALL_ ("LIB_Graphics", "SHAPE_TEXT_SETFONT", data, font.font);
		}

		setText(final string) => {
			this.string = string;
			_OUTER_CALL_ ("LIB_Graphics", "SHAPE_TEXT_SETSTRING", data, string);
		}

		setOrigin(final x, final y) => {
			this.x = x;
			this.y = y;
			_OUTER_CALL_ ("LIB_Graphics", "SHAPE_TEXT_MOVE", data, x, y);
		}

		move(final x, final y) => {
			this.x += x;
			this.y += y;
			_OUTER_CALL_ ("LIB_Graphics", "SHAPE_TEXT_MOVE", data, this.x, this.y);
		}
	}
}

struct Font class {
	var font;
	var fontName;
	var style;
	var size;

	init(final fontName, final style, final size) => {
		this.fontName = fontName;
		this.style = style;
		this.size = size;
		this.font = (_OUTER_CALL_ ("LIB_Graphics", "FONT_INIT", fontName, style, size));
	}

	getString() => {
		return "(" + str fontName + ", " + str style + ", " + str size + ")";
	}
}

static Color class {
	struct RGB class {
		var r;
		var g;
		var b;
		var a;
		var data;

		init(final r, final g, final b, final a) => {
			this.r = r;
			this.g = g;
			this.b = b;
			a == null then {
				this.a = 255;
			} else {
				this.a = a;
			}
			this.data = (_OUTER_CALL_ ("LIB_Graphics", "COLOR_INIT", r, g, b, this.a));
		}

		getString() => {
			return "(" + str r + ", " + str g + ", " + str b + ", " + str a + ")";
		}

		equals(ref o) => {
			type(o) != type(this) then {
				return false;
			}
			return r == o.r && g == o.g && b == o.b && a == o.a;
		}
	}

	HSLtoRGB(final h, final s, final l, final a) => {
		var hueToRgb = (final p, final q, t) => {
			t < 0 then {
				t += 1;
			} else t > 1 then {
				t -= 1;
			}
			t < 1/6 then {
				return p + (q - p) * 6 * t;
			}
			t < 1/2 then {
				return q;
			}
			t < 2/3 then {
				return p + (q - p) * (2/3 - t) * 6;
			}
			return p;
		}
		var r;
		var g;
		var b;
		s == 0 then {
			r = l;
			g = l;
			b = l;
		} else {
			var q = (l < 0.5 ? (l * (1 + s)) : (l + s - l * s));
			var p = 2 * l - q;
			r = hueToRgb(p, q, h + 1/3);
			g = hueToRgb(p, q, h);
			b = hueToRgb(p, q, h - 1/3);
		}
		r *= 256;
		g *= 256;
		b *= 256;
		r = (r > 255 ? 255 : r);
		g = (g > 255 ? 255 : g);
		b = (b > 255 ? 255 : b);
		return new RGB(r, g, b, a);
	}

	var RED = new RGB(255, 0, 0, 255);
	var GREEN = new RGB(0, 255, 0, 255);
	var BLUE = new RGB(0, 0, 255, 255);
	var BLACK = new RGB(0, 0, 0, 255);
	var WHITE = new RGB(255, 255, 255, 255);
	var GRAY = new RGB(200, 200, 200, 255);
	var ALPHA = new RGB(0, 0, 0, 0);
}