load "system";
load "rule";

var ruleSet = {
	# All consonants that are followed by another consonant (except nasals) are [+long]; /kk/ -> /kː/
	Af : [-|syl, -|nasal] -> {[+|long]} // {} ~ {[-|syl, -|approx]},
	# All vowels followed by another vowel of equal frontness are [+long]; /aa/ -> /aː/, /ei/ -> /eː/
	Af : [+|syl, 0|back, 0|front] -> {[+|long]} // {} ~ {[+|syl, 0|back, 0|front]},
	# Consonants are palatalized before /i(ː)/
	S : [-|syl] -> {[+|DOR, +|high, -|low, +|front, -|back]} // {} ~ {[+|syl, +|high, +|front]},
	# Consonants are palatalized before /j/ and the approximant is removed
	Af : [-|syl] -> {[+|DOR, +|high, -|low, +|front, -|back]} // {} ~ {[-|syl, +|approx, +|high, +|front]},
	# Palatalized coronals are further palatalized into fricatives/affricates; /tʲ/ -> /t_ɕ/
	S : [+|cons, -|syl, -|son, +|COR, +|high, -|low, +|front, -|back] -> {[+|del, +|str, +|dist, -|front, +|back]} // {} ~ {[+|syl]},
	# Miscellaneous palatalization of consonants that are unable to be grouped with coronals
	S : 'hʲ' -> {'ç'} // {} ~ {[+|syl]},
	S : 'nʲ' -> {'ɲ'} // {} ~ {[+|syl]},
	# Anterior consonants are palatalized before /ɯ(ː)/
	S : [-|syl, -|approx, +|ant, -|dist] -> {[+|DOR, +|high, -|low, +|front, -|back]} // {} ~ {[+|syl, +|high, +|back]},
	# /ɯ(ː)/ is centralized to /ɨ(ː)/ after a palatalized consonant
	S : [+|syl, +|high, +|back, 0|long] -> {[+|syl, +|high, -|back, 0|long]} // {[-|syl, +|high, +|front]} ~ {},
	# Palatalized anterior consonants become sibilants; /tʲ/ -> /t_s/
	S : [-|syl, -|approx, +|ant, -|dist] -> {[+|del, +|str, -|DOR]} // {} ~ {[+|syl, +|high, -|back, -|front]},
	# Vowels before the moraic nasal are nasalized
	S : [+|syl] -> {[+|nasal]} // {} ~ {'ɴ'},
	# The moraic nasal assimilates to the place of the following consonant
	S : 'ɴ' -> {[1|LAB, 1|round, 1|ld, 1|COR, 1|ant, 1|dist, 1|DOR, 1|high, 1|low, 1|front, 1|back]} // {} ~ {[-|syl, +|cons, 1|LAB, 1|round, 1|ld, 1|COR, 1|ant, 1|dist, 1|DOR, 1|high, 1|low, 1|front, 1|back]}
};

var words = {
	`tikatetɯ`,
	`joɾosikɯ`,
	`geɴki`,
	`sitteiɾɯ`,
	`ɾjɯɯgakɯsei`,
	`siɴbɯɴ`
};

var applied = words.apply(ruleSet);

i in {0 until len words} do {
	println("/" + str words[i] + "/ -> [" + str applied[i] + "]");
};