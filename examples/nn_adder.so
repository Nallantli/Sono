load "system.so";
load "vector.so";
load "neural.so";

# Binary Adder - Neural Network
# Adds two binary digits with a possible carry, formatted as {carry-alpha, a, b} => {c, carry-beta}
# Network size might be overkill for an adder, but it's good for stress testing

var n = new Network.Basic(3, 6, 2, 2);

var data = {
	{{0,0,0}, {0,0}},
	{{0,0,1}, {1,0}},
	{{0,1,0}, {1,0}},
	{{0,1,1}, {0,1}},
	{{1,0,0}, {1,0}},
	{{1,0,1}, {0,1}},
	{{1,1,0}, {0,1}},
	{{1,1,1}, {1,1}}
};

var cycles = 0;
var error = 1;
error >= 0.05 do {
	error = 0;
	var sets = {};
	i in {0 until 10} do {
		sets += data.randomize();
	}
	s in sets do {
		cycles += 1;
		error += n.train(0.5, s[0], s[1]);
	}
	error /= len sets;
	println("Error:\t" + str (error * 100).round() + "%");
}

println("Cycles:\t" + str cycles);
data.map((e) => {
	println(str e[0] + " -> " + str n.propogate(e[0]).map((x) => {return x.round(2)}));
});